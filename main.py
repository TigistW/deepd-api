import matplotlib.pyplot as plt
import numpy as np

# === Copy your actual response content ===
input_window = [
    120.5, 121.0, 122.30000305175781, 123.80000305175781,
    124.0999984741211, 125.69999694824219, 126.4000015258789,
    127.19999694824219, 128.0, 128.89999389648438, 129.5,
    130.10000610351562, 131.0, 132.1999969482422,
    133.39999389648438, 134.10000610351562, 135.60000610351562,
    136.3000030517578, 137.0, 138.5, 139.1999969482422,
    140.0, 141.3000030517578, 142.10000610351562
]

prediction = [
    0.8858056664466858, -0.15830561518669128, -0.7351531386375427,
    -0.5335548520088196, 0.28368502855300903, -0.21231037378311157,
    -0.24825523793697357, -0.8950086832046509, -0.050184234976768494,
    0.8992477059364319, 1.0103001594543457, 0.9904024600982666
]

# Full SHAP values (copied from your response)
shap_values = np.array([
    [0.0, 0.0, -0.011995673842516996, -0.024881026645315812, -0.018709315534815786, -0.007131862591522277, 0.002084604121219702, 0.0023454112693965003, 0.0, -0.008485955641669792, -0.01157031423625771, -0.003578818168308322, 0,0,0,0,0,0,0,0,0,0,0,0],
    [-0.011148683902641577, 0.0, 0.012692150761968645, 0.02113850441552701, 0.01654954654596097, 0.008029119231181941, 0.0, 0.0, 0.0, 0.011057452922207606, 0.009139695201040184, 0.0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [-0.013145151215239261, -0.0018445973598620047, 0.007441877067822094, 0.007940352273850015, 0.008162728013312292, 0.0011768386576757805, -0.0033469659262838646, -0.00899994571672271, -0.00911763074737244, -0.0025775812462437873, -0.004534339872070835, 0.0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0019307592780813607,0.0,0.004757265869713704,0.0,0.0025539087822104034,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0020321287136558642,0.0,0.0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0.0,0.0,0.0,0.0,0.0034921353762062055,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0.0]*24,
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0019631810995488913,0.0,0.0]+[0]*12,
    [-0.009655954178225809,-0.003074326823341457,0.0,0.0,0.0,0.0,0.0025966750956778104,0.001594716555807266,0.0,0.0,0.0,-0.0021246658471370202]+[0]*12,
    [0.0,0.0,0.0,-0.004222215090522931,0.0,0.0,0.0027828650610699744,0.003482591494090598,0.0,0.001504262713159711,0.0,0.0]+[0]*12,
    [0.0,-0.002200285214843754,0.0,0.0,0.0,0.001408313197665279,0.0,0.0,-0.0049210809797032955,0.0,0.0,0.0016513864321281192]+[0]*12,
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0028133546578874113,0.0,0.0,0.0]+[0]*12,
    [-0.008740334950811196,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0026152018407958914,0.0,-0.0018381888495804174,0.0]+[0]*12,
    [0.0,-0.0018414930847973105,-0.003807007047872035,0.0,0.0,0.0,0.0,0.0028714625309877923,0.0,0.0,0.0,0.0016089935187822552]+[0]*12,
    [0.0,-0.00194725797045038,0.0,0.004289794378568627,0.004762985008353602,0.0019461868442596205,0.0,0.0,0.0,0.0,0.0,0.0]+[0]*12,
    [0.0]*24,
    [0.0]*24,
    [0.0]*24,
    [0.00943312305431256,0.0,-0.004261618234178463,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.002956930269170504,0.0032914916088881275]+[0]*12,
    [0.00918600211105429,-0.005020621492382429,-0.00822749908409809,-0.005913735484654673,0.0026151851860563903,0.003709747276461345,0.003852656713450781,0.0,0.008978953610349385,0.005305073202657341,0.006762868505586182,0.005592496249639223]+[0]*12,
    [0.0177501094841329,0.10297347399545236,0.10784829030714961,0.039081532613053194,-0.03268986725830242,-0.057811406859127584,-0.014920476794044268,0.010036703667417744,-0.010430922031337164,-0.04590243824056028,-0.09995634991686339,-0.11403879618220993]+[0]*12,
    [0.06824292054418606,-0.009456791786000035,-0.05665855534889119,-0.15204484910290664,-0.0666508722773078,-0.1738516534394149,-0.06048836265311377,0.011162102846545613,0.24685994820966198,0.12557937352413107,0.0,-0.047944813352740166]+[0]*12,
    [0.24202330051470264,0.11446073670677154,0.17111411726957304,0.29503031110158334,-0.19052504895615305,0.08800199809743098,-0.3336132955353466,0.10936865615323461,-0.12826252122779783,0.02002415356622844,-0.10091912594428736,0.030868680645438767]+[0]*12,
    [-0.2186111496758871,-0.14656436862967281,-0.1898458642204776,-0.13480675048661744,0.2665758454680397,0.14268652936169596,0.35127289876688284,-0.12855527790046065,-0.0851625963930482,-0.0935325990428602,0.16753059126246844,0.09787675047881973]+[0]*12
])

# In reality: load the full shap_values array from your response
# shap_values = np.array(full_response["shap_values"][0])

plt.figure(figsize=(12, 6))
im = plt.imshow(shap_values, aspect='auto', cmap='bwr', vmin=-np.max(np.abs(shap_values)), vmax=np.max(np.abs(shap_values)))

plt.colorbar(im, label="SHAP Value (impact)")
plt.xticks(range(len(input_window)), [f"t-{i}" for i in range(len(input_window), 0, -1)], rotation=90)
plt.yticks(range(len(prediction)), [f"t+{i+1}" for i in range(len(prediction))])

plt.xlabel("Past Input Points (history)")
plt.ylabel("Future Prediction Steps")
plt.title("SHAP Explanation Heatmap")
plt.tight_layout()
plt.show()
